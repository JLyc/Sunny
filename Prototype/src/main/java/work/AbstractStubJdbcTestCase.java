package work;

/**
 * Created by sochaa on 19. 12. 2014.
 */
public abstract class AbstractStubJdbcTestCase {
    /**
     *  Logger for this class.
     */
    private static final Log LOG = LogFactory.getLog(AbstractStubJdbcTestCase.class);

    /**
     * Flag that mock driver is enabled.
     */
    private static boolean isMockDriverSet = false;

    /**
    * Setup MOCK driver before whole run.
     */
    @BeforeClass
    public static void setUpJDBCTestCase()
    {
        if (!isMockDriverSet)
        {
            try
            {
                setMockDriver(true);
                isMockDriverSet = true;
            }
            catch (Exception tibRvExc) // catch 2 exceptions Tibrv and JMS
            {
                LOG.error("Error during initialization of stub JDBC test case!", tibRvExc);
                throw new IntegrationRuntimeException(tibRvExc);
            }
        }
    }

    /**
     * Starts recording JDBC before test.
     */
    @Before
    public final void startRecording()
    {
        jdbcRecorder.start();
    }

    /**
     * Stops recording JDBC after test.
     */
    @After
    public final void stopRecording()
    {
        jdbcRecorder.stop();
    }

    /**
     * Tears down the test.
     *
     * @throws Exception
     *             in case of problems to set up mock driver
     */
    @AfterClass
    public static void tearDownJDBCTestCase() throws Exception
    {
        if ((isMockDriverSet && !isTestInSuite())
                || (isMockDriverSet && isTestInSuite() && isLastClassInSuite()))
        {
            try
            {
                setMockDriver(false);
                isMockDriverSet = false;
            }
            catch (Exception tibJmsExc) // dual excepiton
            {
                LOG.error("Error during original driver reset after JDBC mock test(s)!", tibJmsExc);
                throw new IntegrationRuntimeException(tibJmsExc);
            }
        }
    }







    * Generate output XML for JDBC procedure call. {@link Parameter#index()}
    * and {@link Parameter#name()} attributes are needed in responseSet field
    * {@link Parameter} annotations.
    *
            * @param outputSet
    *            output set for procedure call
    * @return Returns output XML in String.
    * @throws Exception
    *             in case of any error
    */
    protected static String generateJdbcOutput(final IParameterSet outputSet) throws Exception
    {
        ObjectFactory objFactory = new ObjectFactory();
        Outputset newOutputSet = objFactory.createOutputset();
        newOutputSet.setData(objFactory.createOutData());

        Parameter parameter;
        PropertyEditor propertyEditor;

        // find annotated parameter fields
        for (Field field : outputSet.getClass().getDeclaredFields())
        {
            // evaluate parameters
            if (field.isAnnotationPresent(Parameter.class))
            {
                parameter = field.getAnnotation(Parameter.class);

                com.logica.eai.test.bw.jdbc.response.Parameter param = objFactory.createParameter();
                param.setIndex(Integer.valueOf(parameter.index()));
                param.setName(parameter.name());
                field.setAccessible(true);
                propertyEditor = findFieldEditor(field);
                propertyEditor.setValue(field.get(outputSet));
                param.setValue(propertyEditor.getAsText());
                newOutputSet.getData().getParameter().add(param);
            }
        }
        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
        Marshaller marshaller = JAXBContext.newInstance(Outputset.class.getPackage().getName())
                .createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        marshaller.marshal(newOutputSet, outStream);
        return outStream.toString();
    }

    /**
     * Generate value by Class type. Value is generated by paramName and system
     * time.
     * <p>
     * Following types are supported:
     * <ul>
     * <li>{@link String}</li>
     * <li>{@link Integer}</li>
     * <li>{@link Double}</li>
     * <li>{@link Date}</li>
     * <li>other types may be added</li>
     * </ul>
     *
     * @param paramClass
     *            parameter class
     * @param paramName
     *            parameter name is used in generated value
     * @return Returns generated value or <code>null</code> if paramClass is not
     *         supported.
     */
    private static Object generateRowValue(final Class<?> paramClass, final String paramName)
    {
        final int hashLength = 4;
        final int seedLength = 3;
        final double decimalCoef = 100;
        Integer hash = Math.abs(paramName.hashCode() == Integer.MIN_VALUE ? Integer.MAX_VALUE
                : paramName.hashCode());
        hash = Integer.valueOf(hash.toString().substring(hash.toString().length() - hashLength));
        Long seed = System.nanoTime();
        seed = Long.valueOf(seed.toString().substring(seed.toString().length() - seedLength));
        if (String.class == paramClass)
        {
            return paramName + "_" + seed;
        }
        else if (Integer.class == paramClass)
        {
            return Integer.valueOf((int) (hash + seed));
        }
        else if (Double.class == paramClass)
        {
            return Math.round((hash / (double) seed) * decimalCoef) / decimalCoef;
        }
        else if (Date.class == paramClass)
        {
            return new Date();
        }
        return null;
    }
}
